
"use client";

import * as React from "react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { StickyNote, Download, Volume2, PauseCircle, StopCircle } from "lucide-react";
import jsPDF from "jspdf";
import { useToast } from "@/hooks/use-toast";

interface NoteDisplayProps {
  notes: string;
  videoTitle?: string; // Optional: for PDF filename and content
}

export function NoteDisplay({ notes, videoTitle = "EduTube Study Notes" }: NoteDisplayProps) {
  const [isPlaying, setIsPlaying] = React.useState(false);
  const [utterance, setUtterance] = React.useState<SpeechSynthesisUtterance | null>(null);
  const { toast } = useToast();

  React.useEffect(() => {
    return () => {
      if (window.speechSynthesis && window.speechSynthesis.speaking) {
        window.speechSynthesis.cancel();
      }
      setIsPlaying(false);
    };
  }, [notes]);

  const handleTextToSpeech = () => {
    if (!notes) return;
    if (typeof window === 'undefined' || !window.speechSynthesis) {
      toast({ title: "Text-to-Speech Error", description: "Your browser does not support speech synthesis.", variant: "destructive" });
      return;
    }

    if (isPlaying && utterance) {
      window.speechSynthesis.pause();
      setIsPlaying(false);
    } else if (!isPlaying && utterance && window.speechSynthesis.paused) {
      window.speechSynthesis.resume();
      setIsPlaying(true);
    } else {
      if (window.speechSynthesis.speaking) {
        window.speechSynthesis.cancel();
      }
      const newUtterance = new SpeechSynthesisUtterance(notes);
      newUtterance.onstart = () => setIsPlaying(true);
      newUtterance.onend = () => { setIsPlaying(false); setUtterance(null); };
      newUtterance.onerror = (event) => {
        console.error("SpeechSynthesisUtterance.onerror event object:", event);
        const errorMessage = typeof event.error === 'string' ? event.error : "An unknown speech error occurred.";
        toast({ title: "Speech Error", description: `Could not read notes: ${errorMessage}`, variant: "destructive" });
        setIsPlaying(false); setUtterance(null);
      };
      setUtterance(newUtterance);
      window.speechSynthesis.speak(newUtterance);
    }
  };

  const handleStopSpeech = () => {
    if (window.speechSynthesis && window.speechSynthesis.speaking) {
      window.speechSynthesis.cancel();
    }
    setIsPlaying(false);
    setUtterance(null);
  };

  const handleDownloadPdf = () => {
    const doc = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4"
    });
    
    const primaryColor = "#3498db"; // Calm blue from theme
    const textColor = "#333333"; // Dark gray for text
    const lightGrayColor = "#ecf0f1"; // Light gray for subtle elements

    doc.setProperties({
      title: `${videoTitle} - EduTube AI Notes`,
      subject: 'Video Notes generated by EduTube AI',
      author: 'EduTube AI',
      creator: 'EduTube AI'
    });

    const pageHeight = doc.internal.pageSize.height;
    const pageWidth = doc.internal.pageSize.width;
    const margin = 15; // mm
    const contentWidth = pageWidth - (margin * 2);
    let yPosition = margin; 

    const addHeaderAndFooter = (isFirstPage = false) => {
      // Header
      doc.setFontSize(10);
      doc.setTextColor(primaryColor);
      doc.text("EduTube AI", margin, margin - 5);
      doc.setDrawColor(lightGrayColor);
      doc.line(margin, margin -2, pageWidth - margin, margin - 2); // Line under EduTube AI

      // Footer - Page Number
      const pageNum = doc.getNumberOfPages(); // Use getNumberOfPages for current page in multi-page context
      doc.setFontSize(8);
      doc.setTextColor(textColor);
      doc.text(`Page ${pageNum}`, pageWidth - margin, pageHeight - (margin / 2) - 2, { align: 'right' });
    };
    
    // First page setup
    addHeaderAndFooter(true);
    yPosition += 10; // Space after header line

    // Main Title
    doc.setFontSize(20);
    doc.setTextColor(primaryColor);
    const mainTitleLines = doc.splitTextToSize(`Detailed Notes:`, contentWidth);
    doc.text(mainTitleLines, margin, yPosition);
    yPosition += (mainTitleLines.length * 8) + 2; // Adjust spacing

    // Video Title
    doc.setFontSize(14);
    doc.setTextColor(textColor);
    const videoTitleCleaned = videoTitle.replace("EduTube Study Material for ", ""); // Clean up default title
    const videoTitleLines = doc.splitTextToSize(videoTitleCleaned, contentWidth);
    doc.text(videoTitleLines, margin, yPosition);
    yPosition += (videoTitleLines.length * 6) + 10; // Add more space after video title

    // Body Text
    doc.setFontSize(11);
    doc.setTextColor(textColor); 
    doc.setLineHeightFactor(1.4); // Improve line spacing
    const splitNotes = doc.splitTextToSize(notes, contentWidth); 

    splitNotes.forEach((line: string) => {
      if (yPosition > pageHeight - margin - 10) { // Check for new page
        doc.addPage();
        yPosition = margin; 
        addHeaderAndFooter(); // Add header/footer to new page
        yPosition += 10; // Space after header line
        doc.setFontSize(11); // Reset font size for body
        doc.setTextColor(textColor);
        doc.setLineHeightFactor(1.4);
      }
      doc.text(line, margin, yPosition);
      yPosition += 6; // Line height approx 6mm for 11pt font with 1.4 line height
    });
    
    const safeVideoTitle = videoTitle.replace(/[^a-z0-9]/gi, '_').toLowerCase();
    doc.save(`EduTubeAI_Notes_${safeVideoTitle}.pdf`);
    toast({ title: "PDF Downloaded", description: "Your customized notes PDF has been saved."});
  };

  return (
    <Card className="mt-8 shadow-xl rounded-lg overflow-hidden">
      <CardHeader className="bg-muted/30">
        <div className="flex justify-between items-start">
          <div>
            <CardTitle className="flex items-center text-2xl font-semibold">
              <StickyNote className="mr-3 h-7 w-7 text-primary" />
              Detailed Revision Notes
            </CardTitle>
            <CardDescription className="text-base">Key points structured for in-depth study and easy revision. Export as a themed PDF!</CardDescription>
          </div>
          <div className="flex space-x-2">
            <Button onClick={handleTextToSpeech} variant="outline" size="sm" disabled={!notes}>
              {isPlaying && utterance ? <PauseCircle className="mr-2 h-4 w-4" /> : <Volume2 className="mr-2 h-4 w-4" />}
              {isPlaying && utterance ? "Pause" : (utterance && window.speechSynthesis && window.speechSynthesis.paused ? "Resume" : "Read Notes")}
            </Button>
            {isPlaying && utterance && (
                <Button onClick={handleStopSpeech} variant="outline" size="sm" >
                    <StopCircle className="mr-2 h-4 w-4" />
                    Stop
                </Button>
            )}
            <Button onClick={handleDownloadPdf} variant="outline" size="sm" className="whitespace-nowrap" disabled={!notes}>
              <Download className="mr-2 h-4 w-4" />
              Download Themed PDF
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent className="p-6">
        <ScrollArea className="h-96 w-full rounded-md border p-4 bg-background">
          <div className="prose prose-sm max-w-none prose-p:my-2 prose-headings:my-3 prose-ul:my-2 prose-ol:my-2 dark:prose-invert">
             <pre className="whitespace-pre-wrap text-sm leading-relaxed font-sans">{notes}</pre>
          </div>
        </ScrollArea>
      </CardContent>
    </Card>
  );
}
