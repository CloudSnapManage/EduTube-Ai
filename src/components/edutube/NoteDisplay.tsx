
"use client";

import * as React from "react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { StickyNote, Download } from "lucide-react";
import jsPDF from "jspdf";

interface NoteDisplayProps {
  notes: string;
  videoTitle?: string; // Optional: for PDF filename
}

export function NoteDisplay({ notes, videoTitle = "EduTube Notes" }: NoteDisplayProps) {

  const handleDownloadPdf = () => {
    const doc = new jsPDF({
      orientation: "portrait",
      unit: "mm",
      format: "a4"
    });
    
    doc.setProperties({
      title: `${videoTitle} - Notes`,
      subject: 'Video Notes generated by EduTube AI',
      author: 'EduTube AI',
      creator: 'EduTube AI'
    });

    const pageHeight = doc.internal.pageSize.height;
    const pageWidth = doc.internal.pageSize.width;
    const margin = 15; // mm
    const contentWidth = pageWidth - (margin * 2);
    let yPosition = margin + 10; // Start position for text, with space for title

    // Add title to PDF
    doc.setFontSize(18);
    doc.setTextColor(40, 40, 40); // Dark gray
    const titleLines = doc.splitTextToSize(`${videoTitle} - Detailed Notes`, contentWidth);
    doc.text(titleLines, margin, yPosition);
    yPosition += (titleLines.length * 7) + 10; // Adjust space after title

    // Add notes content
    doc.setFontSize(11);
    doc.setTextColor(60, 60, 60); // Slightly lighter gray for content
    
    const splitNotes = doc.splitTextToSize(notes, contentWidth); 

    splitNotes.forEach((line: string) => {
      if (yPosition > pageHeight - margin) { // Check if new page is needed
        doc.addPage();
        yPosition = margin; // Reset Y for new page
        // Optionally add header to subsequent pages
        doc.setFontSize(9);
        doc.setTextColor(150, 150, 150);
        doc.text(`Page ${doc.getNumberOfPages()}`, pageWidth - margin, margin - 5, { align: 'right' });
        doc.setTextColor(60, 60, 60);
        doc.setFontSize(11);
      }
      doc.text(line, margin, yPosition);
      yPosition += 6; // Line height for 11pt font
    });
    
    const safeVideoTitle = videoTitle.replace(/[^a-z0-9]/gi, '_').toLowerCase();
    doc.save(`${safeVideoTitle}_detailed_notes.pdf`);
  };

  return (
    <Card className="mt-8 shadow-xl rounded-lg overflow-hidden">
      <CardHeader className="bg-muted/30">
        <div className="flex justify-between items-start">
          <div>
            <CardTitle className="flex items-center text-2xl font-semibold">
              <StickyNote className="mr-3 h-7 w-7 text-primary" />
              Detailed Revision Notes
            </CardTitle>
            <CardDescription className="text-base">Key points structured for in-depth study and easy revision.</CardDescription>
          </div>
          <Button onClick={handleDownloadPdf} variant="outline" size="sm" className="whitespace-nowrap">
            <Download className="mr-2 h-4 w-4" />
            Download PDF
          </Button>
        </div>
      </CardHeader>
      <CardContent className="p-6">
        <ScrollArea className="h-96 w-full rounded-md border p-4 bg-background">
          {/* Using a div with prose for better markdown-like text rendering if notes contain it */}
          <div className="prose prose-sm max-w-none prose-p:my-2 prose-headings:my-3 prose-ul:my-2 prose-ol:my-2 dark:prose-invert">
             <pre className="whitespace-pre-wrap text-sm leading-relaxed font-sans">{notes}</pre>
          </div>
        </ScrollArea>
      </CardContent>
    </Card>
  );
}
